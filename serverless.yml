service: back-e-comerce

frameworkVersion: 4.4.x

provider:
  name: aws
  runtime: nodejs22.x
  region: us-east-2
  stage: ${opt:stage, 'dev'}

  # CORS Global Configuration for HTTP API (V2)
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: false

    # Lambda Authorizer Configuration
    authorizers:
      lambdaAuthorizer:
        type: request
        functionName: authorize

  # Lambda settings
  memorySize: 512
  architecture: arm64

  # Log settings
  logRetentionInDays: 7

  # IAM Role
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            # Auth module tables
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.usersTableName}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.usersTableName}/index/*"
            # Dashboard module tables
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.productosTableName}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.carritosTableName}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.productosTableName}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.carritosTableName}/index/*"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:PutObjectAcl
          Resource:
            - "arn:aws:s3:::${self:custom.filesBucketName}/*"

  # Environment Variables
  environment:
    # Auth module variables
    DISCORD_WEBHOOK_URL: ${env:DISCORD_WEBHOOK_URL, ''}
    JWT_SECRET: ${env:JWT_SECRET, 'ecomerce2026'}
    USERS_TABLE: ${self:custom.usersTableName}
    SALT_ROUNDS: 10
    # Dashboard module variables
    PRODUCTOS_TABLE: ${self:custom.productosTableName}
    CARRITOS_TABLE: ${self:custom.carritosTableName}
    WHATSAPP_NUMBER: ${env:WHATSAPP_NUMBER, '+5491123456789'}
    COMPANY_NAME: ${env:COMPANY_NAME, 'Depotix'}
    # S3 configuration
    S3_BUCKET_NAME: ${self:custom.filesBucketName}
    AWS_REGION: ${self:provider.region}

custom:
  # Auth module tables
  usersTableName: ${self:service}-users-${sls:stage}
  # Dashboard module tables
  productosTableName: ${self:service}-productos-${sls:stage}
  carritosTableName: ${self:service}-carritos-${sls:stage}
  # S3 bucket
  filesBucketName: ${self:service}-files-${sls:stage}

functions:
  # ========================================
  # AUTH MODULE FUNCTIONS
  # ========================================

  # Authorizer function
  authorize:
    handler: module/auth/exports/authorizer.authorize
    timeout: 10

  login:
    handler: module/auth/exports/login.login
    events:
      - httpApi:
          path: /auth/login
          method: POST

  # ========================================
  # DASHBOARD MODULE FUNCTIONS
  # ========================================

  # Product functions
  createProducto:
    handler: module/dashboard/exports/productos.createProducto
    events:
      - httpApi:
          path: /productos
          method: POST
          authorizer:
            name: lambdaAuthorizer

  getProductoById:
    handler: module/dashboard/exports/productos.getProductoById
    events:
      - httpApi:
          path: /productos/{id}
          method: GET

  getAllProductos:
    handler: module/dashboard/exports/productos.getAllProductos
    events:
      - httpApi:
          path: /productos
          method: GET

  getProductosByCategoria:
    handler: module/dashboard/exports/productos.getProductosByCategoria
    events:
      - httpApi:
          path: /productos/categoria/{categoria}
          method: GET

  getProductosDestacados:
    handler: module/dashboard/exports/productos.getProductosDestacados
    events:
      - httpApi:
          path: /productos/destacados
          method: GET

  buscarProductos:
    handler: module/dashboard/exports/productos.buscarProductos
    events:
      - httpApi:
          path: /productos/buscar
          method: GET

  updateProducto:
    handler: module/dashboard/exports/productos.updateProducto
    events:
      - httpApi:
          path: /productos
          method: PUT
          authorizer:
            name: lambdaAuthorizer

  deleteProducto:
    handler: module/dashboard/exports/productos.deleteProducto
    events:
      - httpApi:
          path: /productos/{id}
          method: DELETE
          authorizer:
            name: lambdaAuthorizer

  getCategorias:
    handler: module/dashboard/exports/productos.getCategorias
    events:
      - httpApi:
          path: /productos/categorias
          method: GET

  # Cart functions
  createCarrito:
    handler: module/dashboard/exports/carrito.createCarrito
    events:
      - httpApi:
          path: /carrito
          method: POST

  getCarritoById:
    handler: module/dashboard/exports/carrito.getCarritoById
    events:
      - httpApi:
          path: /carrito/{id}
          method: GET

  getCarritoByUsuario:
    handler: module/dashboard/exports/carrito.getCarritoByUsuario
    events:
      - httpApi:
          path: /carrito/usuario/{usuarioId}
          method: GET

  agregarItem:
    handler: module/dashboard/exports/carrito.agregarItem
    events:
      - httpApi:
          path: /carrito/agregar-item
          method: POST

  actualizarCantidad:
    handler: module/dashboard/exports/carrito.actualizarCantidad
    events:
      - httpApi:
          path: /carrito/actualizar-cantidad
          method: PUT

  eliminarItem:
    handler: module/dashboard/exports/carrito.eliminarItem
    events:
      - httpApi:
          path: /carrito/eliminar-item
          method: DELETE

  limpiarCarrito:
    handler: module/dashboard/exports/carrito.limpiarCarrito
    events:
      - httpApi:
          path: /carrito/{id}/limpiar
          method: DELETE

  # WhatsApp functions
  generarMensajePedido:
    handler: module/dashboard/exports/whatsapp.generarMensajePedido
    events:
      - httpApi:
          path: /whatsapp/pedido/{carritoId}
          method: GET

  generarMensajeConsulta:
    handler: module/dashboard/exports/whatsapp.generarMensajeConsulta
    events:
      - httpApi:
          path: /whatsapp/consulta/{productoId}
          method: GET

  getConfiguracionWhatsApp:
    handler: module/dashboard/exports/whatsapp.getConfiguracion
    events:
      - httpApi:
          path: /whatsapp/configuracion
          method: GET

  # ========================================
  # ARCHIVO MODULE FUNCTIONS
  # ========================================

  generarPresignedUrl:
    handler: module/dashboard/exports/archivo.generarPresignedUrl
    events:
      - httpApi:
          path: /archivos/presigned-url
          method: GET

resources:
  Resources:
    # ========================================
    # AUTH MODULE RESOURCES
    # ========================================
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # ========================================
    # DASHBOARD MODULE RESOURCES
    # ========================================

    # Productos Table
    ProductosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.productosTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: categoria
            AttributeType: S
          - AttributeName: destacado
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: categoria-index
            KeySchema:
              - AttributeName: categoria
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: destacado-index
            KeySchema:
              - AttributeName: destacado
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # Carritos Table
    CarritosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.carritosTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: usuarioId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: usuario-index
            KeySchema:
              - AttributeName: usuarioId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # ========================================
    # S3 RESOURCES
    # ========================================

    FilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ["*"]
              MaxAge: 3000
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldVersions
              Status: Enabled
              NoncurrentVersionExpiration:
                NoncurrentDays: 30

    # Bucket Policy para acceso público de lectura
    FilesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: FilesBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource:
                - Fn::Join: ["", [Fn::GetAtt: [FilesBucket, Arn], "/*"]]
